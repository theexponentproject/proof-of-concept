pragma solidity ^0.4.24;


// Public vs private?
// How to check if not in map? Run out of gas, yikes?
// Putting down money in constructor
// Putting down money in payin

contract ReferralTree {

	address public founder = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;

	// The question link the user asks
	string questionLink;
	address ownerAddr;
	uint256 reward;

	// Book keeping for referral tree

	// Address List
	address[] addressArray;
	// Forward map
	mapping (address => address[]) forwardMap;
	// Backward map
	mapping (address => address) backwardMap;
	// Answer mapping
	mapping (address => string) answerMap;

	//Save mapping (used for checkpointing)
	mapping (address => uint256) saveMap;

	// Used for payment (with checkpointing)
	uint256 nextPayeeIndex;

	// You have to put down money?
	constructor (string _questionLink) payable public {
        questionLink = _questionLink;
		ownerAddr = msg.sender;
		reward = msg.value;
		backwardMap[msg.sender] = 0;
		answerMap[msg.sender] = "";
		addressArray.push(msg.sender);
		saveMap[msg.sender] = addressArray.length;
    }


	// referral code is parent address also
	function addReferral(address referralCodeAlsoParentAddr) {
		addressArray.push(msg.sender);
		backwardMap[msg.sender] = referralCodeAlsoParentAddr;

		// Adding new node into parent's children
		address[] temp = forwardMap[referralCodeAlsoParentAddr];
		temp.push(msg.sender);
		forwardMap[referralCodeAlsoParentAddr] = temp;

		answerMap[msg.sender] = "";
		saveMap[msg.sender] = addressArray.length;
	}

    function payIn() payable public {
        reward += msg.value;
    }

	// can just be public automaticall
    function getReward() public view returns (uint) {
        return reward;
    }

	// Not sure how to do this
	function attemptAnswer(string attempt) public {
		// Check later
		address send = msg.sender;
// 		require( bytes(answerMap[msg.sender]).length == 0);
		answerMap[msg.sender] = attempt;
	}

	modifier onlyCreator() {
        require(msg.sender == ownerAddr); // If it is incorrect here, it reverts.
        _;                              // Otherwise, it continues.
    }

	// Iterably returning one at a time.
	function viewAnswerMapAddress(uint256 index) onlyCreator view returns (address){
		return addressArray[index];
	}

	// Iterably returning one at a time.
	function viewAnswerMapAnswer(uint256 index) onlyCreator view returns (string){
		return answerMap[addressArray[index]];
	}

    // Getter for total nodes
    function viewNumTotalNodes() onlyCreator view returns (uint256){
        return addressArray.length;
    }

    // Getter for questionLink
    function getQuestionLink() public view returns (string){
        return questionLink;
    }

    // Getter for visualizing tree
    // function viewForward

	function payOut(address addr) onlyCreator {
		address toPayAddr = addr;
		uint256 i = saveMap[addr] - 1;
		uint256 iter = 2;

		while (i > 1 && gasleft() > 200000) {

			toPayAddr.transfer(reward / iter);

			iter = iter * 2;
			toPayAddr = backwardMap[toPayAddr];
			i = saveMap[toPayAddr] -1;

		}
    nextPayeeIndex = i;
	selfdestruct(founder);
	}
}
